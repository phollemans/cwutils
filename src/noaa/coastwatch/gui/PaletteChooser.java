////////////////////////////////////////////////////////////////////////
/*
     FILE: PaletteChooser.java
  PURPOSE: To select from a set of colour palettes.
   AUTHOR: Peter Hollemans
     DATE: 2003/09/06
  CHANGES: 2004/01/15, PFH, updated Javadocs
           2004/02/17, PFH
             - modified to get/set palette objects
             - added TabComponent interface
             - removed explicit property change support
           2004/05/17, PFH, changed to use PaletteFactory.getPredefined()
           2004/05/22, PFH, modified to use GUIServices.getIcon()

  CoastWatch Software Library and Utilities
  Copyright 2004, USDOC/NOAA/NESDIS CoastWatch

*/
////////////////////////////////////////////////////////////////////////

// Package
// -------
package noaa.coastwatch.gui;

// Imports
// -------
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.util.List;
import javax.swing.Icon;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ListSelectionModel;
import javax.swing.border.EtchedBorder;
import javax.swing.border.TitledBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import noaa.coastwatch.gui.GUIServices;
import noaa.coastwatch.gui.PalettePanel;
import noaa.coastwatch.gui.TabComponent;
import noaa.coastwatch.render.Palette;
import noaa.coastwatch.render.PaletteFactory;

/**
 * A palette chooser is a panel that allows the user to pick a colour
 * palette from a selection of predefined palettes.  A color palette
 * is typically used in conjunction with a 2D data variable to map a
 * set of data values to a set of colours.<p>
 *
 * The palette chooser signals a change in the selected palette by
 * firing a <code>PropertyChangeEvent</code> whose property name is
 * <code>PaletterChooser.PALETTE_PROPERTY</code>, and new value
 * contains a palette name from the predefined palettes supplied by
 * the {@link noaa.coastwatch.render.Palette} class.
 *
 * @author Peter Hollemans
 * @since 3.1.6
 */
public class PaletteChooser
  extends JPanel
  implements TabComponent {

  // Constants
  // ---------
  /** The height of the palette stripe. */
  private static final int PALETTE_HEIGHT = 40;

  /** The palette property. */
  public static final String PALETTE_PROPERTY = "palette";

  /** The palette tooltip. */
  private static final String PALETTE_TOOLTIP = "Color Palette";

  // Variables
  // ---------    
  /** The list of palette names. */
  private JList paletteList;

  /** The palette display panel. */
  private PalettePanel palettePanel;

  ////////////////////////////////////////////////////////////

  /** 
   * Creates a new palette chooser panel.  Initially no palette is
   * selected.
   */  
  public PaletteChooser () {

    // Call super
    // ----------
    super (new BorderLayout());

    // Create palette panel
    // --------------------
    JPanel palettePanelContainer = new JPanel (new BorderLayout());
    palettePanelContainer.setBorder (new TitledBorder (new EtchedBorder(), 
      "Palette"));
    this.add (palettePanelContainer, BorderLayout.NORTH);
    palettePanel = new PalettePanel();
    palettePanel.setPreferredSize (new Dimension (PALETTE_HEIGHT, 
      PALETTE_HEIGHT));
    palettePanelContainer.add (palettePanel, BorderLayout.CENTER);

    // Create palette list
    // -------------------
    JPanel paletteListContainer = new JPanel (new BorderLayout());
    paletteListContainer.setBorder (new TitledBorder (new EtchedBorder(), 
      "Palette List"));
    this.add (paletteListContainer, BorderLayout.CENTER);
    paletteList = new JList (PaletteFactory.getPredefined().toArray());
    paletteList.setSelectionMode (ListSelectionModel.SINGLE_SELECTION);
    paletteList.addListSelectionListener (new PaletteListListener());        
    JScrollPane scrollPane = new JScrollPane (paletteList);
    paletteListContainer.add (scrollPane, BorderLayout.CENTER);

  } // PaletteChooser constructor

  ////////////////////////////////////////////////////////////

  /** Handles events generated by the palette list. */
  private class PaletteListListener 
    implements ListSelectionListener {

    public void valueChanged (ListSelectionEvent event) {

      // Check for adjusting
      // -------------------
      if (event.getValueIsAdjusting()) return;

      // Set palette in palette panel
      // ----------------------------
      Palette newPalette = getPalette();
      palettePanel.setPalette (newPalette);

      // Fire property change event
      // --------------------------
      PaletteChooser.this.firePropertyChange (PALETTE_PROPERTY, null, 
        newPalette);

    } // valueChanged

  } // PaletteListListener class

  ////////////////////////////////////////////////////////////

  /** 
   * Gets the currently selected palette or null if no palette is
   * selected.
   */
  public Palette getPalette () { 

    String paletteName = (String) paletteList.getSelectedValue();
    if (paletteName == null) 
      return (null);
    else 
      return (PaletteFactory.create (paletteName));

  } // getPalette

  ////////////////////////////////////////////////////////////

  /** 
   * Sets the selected palette.  The palette must have been obtained
   * using the <code>Palette.getInstance()</code> method or be a value
   * previously returned by <code>getPalette()</code>.
   */
  public void setPalette (
    Palette palette
  ) { 

    paletteList.setSelectedValue (palette.getName(), true); 

  } // setPalette
  
  ////////////////////////////////////////////////////////////

  /** 
   * Set the selected palette by name.
   *
   * @param name the palette name.
   *
   * @see #setPalette(Palette)
   */
  public void setPalette (
    String name
  ) {

    paletteList.setSelectedValue (name, true);

  } // setPalette

  ////////////////////////////////////////////////////////////

  @Override public Icon getIcon () { return (GUIServices.getIcon ("palette.tab")); }

  ////////////////////////////////////////////////////////////

  @Override
  public String getToolTip () { return (PALETTE_TOOLTIP); }

  ////////////////////////////////////////////////////////////

  @Override
  public String getTitle () { return (null); }

  ////////////////////////////////////////////////////////////

} // PaletteChooser class

////////////////////////////////////////////////////////////////////////
