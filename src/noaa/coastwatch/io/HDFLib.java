////////////////////////////////////////////////////////////////////////
/*
     FILE: HDFLib.java
  PURPOSE: Provides a singleton access point for the HDF 4 library.
   AUTHOR: Peter Hollemans
     DATE: 2015/04/17
  CHANGES: n/a

  CoastWatch Software Library and Utilities
  Copyright 1998-2015, USDOC/NOAA/NESDIS CoastWatch

*/
////////////////////////////////////////////////////////////////////////

// Package
// -------
package noaa.coastwatch.io;

// Imports
// -------
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import ncsa.hdf.hdflib.HDFChunkInfo;
import ncsa.hdf.hdflib.HDFConstants;
import ncsa.hdf.hdflib.HDFDeflateCompInfo;
import ncsa.hdf.hdflib.HDFCompInfo;
import ncsa.hdf.hdflib.HDFException;
import ncsa.hdf.hdflib.HDFLibrary;

/**
 * The <code>HDFLib</code> object provides a singleton interface for accessing
 * a thread-safe version of the HDF 4 library.  All methods should use this
 * interface for performing HDF 4 library operations.
 *
 * @author Peter Hollemans
 * @since 3.3.1
 */
public class HDFLib {

  // Variables
  // ---------

  /** The single instance of this class. */
  private static HDFLib instance;
  
  ////////////////////////////////////////////////////////////

  /**
   * Creates an instance of this object.
   *
   * @return the object instance.
   */
  private HDFLib () { }

  ////////////////////////////////////////////////////////////
  
  /**
   * Gets the singleton instance of this class.
   *
   * @return the singeton instance.
   */
  public static HDFLib getInstance () {
  
    if (instance == null) instance = new HDFLib();
    return (instance);
    
  } // getInstance
    
  ////////////////////////////////////////////////////////////

  /**
   * These are the HDF 4 library method signatures that have been autogenerated
   * using reflection by the main program below.  Each method wraps an HDF 4
   * library call with a synchronized modifier so that any class using the
   * singleton object is guaranteed to have thread-safe access to the library.
   */

  public synchronized void loadH4Lib () {
    HDFLibrary.loadH4Lib ();
  } // loadH4Lib

  public synchronized int Hopen (String arg0, int arg1) throws HDFException {
    return (HDFLibrary.Hopen (arg0, arg1));
  } // Hopen

  public synchronized int Hopen (String arg0) throws HDFException {
    return (HDFLibrary.Hopen (arg0));
  } // Hopen

  public synchronized String getJHIVersion () {
    return (HDFLibrary.getJHIVersion ());
  } // getJHIVersion

  public synchronized boolean Hclose (int arg0) throws HDFException {
    return (HDFLibrary.Hclose (arg0));
  } // Hclose

  public synchronized int HDdont_atexit () throws HDFException {
    return (HDFLibrary.HDdont_atexit ());
  } // HDdont_atexit

  public synchronized boolean Hishdf (String arg0) throws HDFException {
    return (HDFLibrary.Hishdf (arg0));
  } // Hishdf

  public synchronized int Hnumber (int arg0) throws HDFException {
    return (HDFLibrary.Hnumber (arg0));
  } // Hnumber

  public synchronized int DFKNTsize (int arg0) throws HDFException {
    return (HDFLibrary.DFKNTsize (arg0));
  } // DFKNTsize

  public synchronized String HDgetNTdesc (int arg0) throws HDFException {
    return (HDFLibrary.HDgetNTdesc (arg0));
  } // HDgetNTdesc

  public synchronized boolean Hcache (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.Hcache (arg0, arg1));
  } // Hcache

  public synchronized boolean Hgetfileversion (int arg0, int[] arg1, String[] arg2) throws HDFException {
    return (HDFLibrary.Hgetfileversion (arg0, arg1, arg2));
  } // Hgetfileversion

  public synchronized boolean Hgetlibversion (int[] arg0, String[] arg1) throws HDFException {
    return (HDFLibrary.Hgetlibversion (arg0, arg1));
  } // Hgetlibversion

  public synchronized boolean Hsetaccesstype (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.Hsetaccesstype (arg0, arg1));
  } // Hsetaccesstype

  public synchronized boolean Hsync (int arg0) throws HDFException {
    return (HDFLibrary.Hsync (arg0));
  } // Hsync

  public synchronized int ANstart (int arg0) throws HDFException {
    return (HDFLibrary.ANstart (arg0));
  } // ANstart

  public synchronized boolean ANend (int arg0) throws HDFException {
    return (HDFLibrary.ANend (arg0));
  } // ANend

  public synchronized boolean ANendaccess (int arg0) throws HDFException {
    return (HDFLibrary.ANendaccess (arg0));
  } // ANendaccess

  public synchronized boolean ANfileinfo (int arg0, int[] arg1) throws HDFException {
    return (HDFLibrary.ANfileinfo (arg0, arg1));
  } // ANfileinfo

  public synchronized int ANselect (int arg0, int arg1, int arg2) throws HDFException {
    return (HDFLibrary.ANselect (arg0, arg1, arg2));
  } // ANselect

  public synchronized int ANnumann (int arg0, int arg1, short arg2, short arg3) throws HDFException {
    return (HDFLibrary.ANnumann (arg0, arg1, arg2, arg3));
  } // ANnumann

  public synchronized short ANatype2tag (int arg0) throws HDFException {
    return (HDFLibrary.ANatype2tag (arg0));
  } // ANatype2tag

  public synchronized int ANtag2atype (short arg0) throws HDFException {
    return (HDFLibrary.ANtag2atype (arg0));
  } // ANtag2atype

  public synchronized int ANannlist (int arg0, int arg1, int arg2, int arg3, int[] arg4) throws HDFException {
    return (HDFLibrary.ANannlist (arg0, arg1, arg2, arg3, arg4));
  } // ANannlist

  public synchronized int ANannlen (int arg0) throws HDFException {
    return (HDFLibrary.ANannlen (arg0));
  } // ANannlen

  public synchronized boolean ANreadann (int arg0, String[] arg1, int arg2) throws HDFException {
    return (HDFLibrary.ANreadann (arg0, arg1, arg2));
  } // ANreadann

  public synchronized int ANcreate (int arg0, short arg1, short arg2, int arg3) throws HDFException {
    return (HDFLibrary.ANcreate (arg0, arg1, arg2, arg3));
  } // ANcreate

  public synchronized int ANcreatef (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.ANcreatef (arg0, arg1));
  } // ANcreatef

  public synchronized int ANget_tagref (int arg0, int arg1, int arg2, short[] arg3) throws HDFException {
    return (HDFLibrary.ANget_tagref (arg0, arg1, arg2, arg3));
  } // ANget_tagref

  public synchronized boolean ANid2tagref (int arg0, short[] arg1) throws HDFException {
    return (HDFLibrary.ANid2tagref (arg0, arg1));
  } // ANid2tagref

  public synchronized int ANtagref2id (int arg0, short arg1, short arg2) throws HDFException {
    return (HDFLibrary.ANtagref2id (arg0, arg1, arg2));
  } // ANtagref2id

  public synchronized boolean ANwriteann (int arg0, String arg1, int arg2) throws HDFException {
    return (HDFLibrary.ANwriteann (arg0, arg1, arg2));
  } // ANwriteann

  public synchronized boolean DFPaddpal (String arg0, byte[] arg1) throws HDFException {
    return (HDFLibrary.DFPaddpal (arg0, arg1));
  } // DFPaddpal

  public synchronized boolean DFPgetpal (String arg0, byte[] arg1) throws HDFException {
    return (HDFLibrary.DFPgetpal (arg0, arg1));
  } // DFPgetpal

  public synchronized short DFPlastref () throws HDFException {
    return (HDFLibrary.DFPlastref ());
  } // DFPlastref

  public synchronized int DFPnpals (String arg0) throws HDFException {
    return (HDFLibrary.DFPnpals (arg0));
  } // DFPnpals

  public synchronized boolean DFPputpal (String arg0, byte[] arg1, int arg2, String arg3) throws HDFException {
    return (HDFLibrary.DFPputpal (arg0, arg1, arg2, arg3));
  } // DFPputpal

  public synchronized boolean DFPputpal (String arg0, byte[] arg1, boolean arg2, String arg3) throws HDFException {
    return (HDFLibrary.DFPputpal (arg0, arg1, arg2, arg3));
  } // DFPputpal

  public synchronized boolean DFPreadref (String arg0, short arg1) throws HDFException {
    return (HDFLibrary.DFPreadref (arg0, arg1));
  } // DFPreadref

  public synchronized short DFPrestart () throws HDFException {
    return (HDFLibrary.DFPrestart ());
  } // DFPrestart

  public synchronized boolean DFPwriteref (String arg0, short arg1) throws HDFException {
    return (HDFLibrary.DFPwriteref (arg0, arg1));
  } // DFPwriteref

  public synchronized int GRstart (int arg0) throws HDFException {
    return (HDFLibrary.GRstart (arg0));
  } // GRstart

  public synchronized boolean GRend (int arg0) throws HDFException {
    return (HDFLibrary.GRend (arg0));
  } // GRend

  public synchronized boolean GRfileinfo (int arg0, int[] arg1) throws HDFException {
    return (HDFLibrary.GRfileinfo (arg0, arg1));
  } // GRfileinfo

  public synchronized boolean GRgetchunkinfo (int arg0, HDFChunkInfo arg1, int[] arg2) throws HDFException {
    return (HDFLibrary.GRgetchunkinfo (arg0, arg1, arg2));
  } // GRgetchunkinfo

  public synchronized int GRselect (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.GRselect (arg0, arg1));
  } // GRselect

  public synchronized int GRnametoindex (int arg0, String arg1) throws HDFException {
    return (HDFLibrary.GRnametoindex (arg0, arg1));
  } // GRnametoindex

  public synchronized boolean GRgetiminfo (int arg0, String[] arg1, int[] arg2, int[] arg3) throws HDFException {
    return (HDFLibrary.GRgetiminfo (arg0, arg1, arg2, arg3));
  } // GRgetiminfo

  public synchronized boolean GRreadimage (int arg0, int[] arg1, int[] arg2, int[] arg3, Object arg4) throws HDFException {
    return (HDFLibrary.GRreadimage (arg0, arg1, arg2, arg3, arg4));
  } // GRreadimage

  public synchronized boolean GRreadimage (int arg0, int[] arg1, int[] arg2, int[] arg3, byte[] arg4) throws HDFException {
    return (HDFLibrary.GRreadimage (arg0, arg1, arg2, arg3, arg4));
  } // GRreadimage

  public synchronized boolean GRendaccess (int arg0) throws HDFException {
    return (HDFLibrary.GRendaccess (arg0));
  } // GRendaccess

  public synchronized short GRidtoref (int arg0) throws HDFException {
    return (HDFLibrary.GRidtoref (arg0));
  } // GRidtoref

  public synchronized int GRreftoindex (int arg0, short arg1) throws HDFException {
    return (HDFLibrary.GRreftoindex (arg0, arg1));
  } // GRreftoindex

  public synchronized boolean GRreqlutil (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.GRreqlutil (arg0, arg1));
  } // GRreqlutil

  public synchronized boolean GRreqimageil (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.GRreqimageil (arg0, arg1));
  } // GRreqimageil

  public synchronized int GRgetlutid (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.GRgetlutid (arg0, arg1));
  } // GRgetlutid

  public synchronized int GRgetnluts (int arg0) throws HDFException {
    return (HDFLibrary.GRgetnluts (arg0));
  } // GRgetnluts

  public synchronized boolean GRgetlutinfo (int arg0, int[] arg1) throws HDFException {
    return (HDFLibrary.GRgetlutinfo (arg0, arg1));
  } // GRgetlutinfo

  public synchronized boolean GRreadlut (int arg0, byte[] arg1) throws HDFException {
    return (HDFLibrary.GRreadlut (arg0, arg1));
  } // GRreadlut

  public synchronized boolean GRreadlut (int arg0, Object arg1) throws HDFException {
    return (HDFLibrary.GRreadlut (arg0, arg1));
  } // GRreadlut

  public synchronized boolean GRattrinfo (int arg0, int arg1, String[] arg2, int[] arg3) throws HDFException {
    return (HDFLibrary.GRattrinfo (arg0, arg1, arg2, arg3));
  } // GRattrinfo

  public synchronized boolean GRgetattr (int arg0, int arg1, Object arg2) throws HDFException {
    return (HDFLibrary.GRgetattr (arg0, arg1, arg2));
  } // GRgetattr

  public synchronized boolean GRgetattr (int arg0, int arg1, byte[] arg2) throws HDFException {
    return (HDFLibrary.GRgetattr (arg0, arg1, arg2));
  } // GRgetattr

  public synchronized int GRfindattr (int arg0, String arg1) throws HDFException {
    return (HDFLibrary.GRfindattr (arg0, arg1));
  } // GRfindattr

  public synchronized int GRcreate (int arg0, String arg1, int arg2, int arg3, int arg4, int[] arg5) throws HDFException {
    return (HDFLibrary.GRcreate (arg0, arg1, arg2, arg3, arg4, arg5));
  } // GRcreate

  public synchronized short GRluttoref (int arg0) throws HDFException {
    return (HDFLibrary.GRluttoref (arg0));
  } // GRluttoref

  public synchronized boolean GRsetattr (int arg0, String arg1, int arg2, int arg3, String arg4) throws HDFException {
    return (HDFLibrary.GRsetattr (arg0, arg1, arg2, arg3, arg4));
  } // GRsetattr

  public synchronized boolean GRsetattr (int arg0, String arg1, int arg2, int arg3, Object arg4) throws HDFException {
    return (HDFLibrary.GRsetattr (arg0, arg1, arg2, arg3, arg4));
  } // GRsetattr

  public synchronized boolean GRsetattr (int arg0, String arg1, int arg2, int arg3, byte[] arg4) throws HDFException {
    return (HDFLibrary.GRsetattr (arg0, arg1, arg2, arg3, arg4));
  } // GRsetattr

  public synchronized boolean GRsetchunk (int arg0, HDFChunkInfo arg1, int arg2) throws HDFException {
    return (HDFLibrary.GRsetchunk (arg0, arg1, arg2));
  } // GRsetchunk

  public synchronized int GRsetchunkcache (int arg0, int arg1, int arg2) throws HDFException {
    return (HDFLibrary.GRsetchunkcache (arg0, arg1, arg2));
  } // GRsetchunkcache

  public synchronized boolean GRsetcompress (int arg0, int arg1, HDFCompInfo arg2) throws HDFException {
    return (HDFLibrary.GRsetcompress (arg0, arg1, arg2));
  } // GRsetcompress

  public synchronized boolean GRgetcompress (int arg0, HDFCompInfo arg1) throws HDFException {
    return (HDFLibrary.GRgetcompress (arg0, arg1));
  } // GRgetcompress

  public synchronized boolean GRsetexternalfile (int arg0, String arg1, int arg2) throws HDFException {
    return (HDFLibrary.GRsetexternalfile (arg0, arg1, arg2));
  } // GRsetexternalfile

  public synchronized boolean GRwriteimage (int arg0, int[] arg1, int[] arg2, int[] arg3, byte[] arg4) throws HDFException {
    return (HDFLibrary.GRwriteimage (arg0, arg1, arg2, arg3, arg4));
  } // GRwriteimage

  public synchronized boolean GRwriteimage (int arg0, int[] arg1, int[] arg2, int[] arg3, Object arg4) throws HDFException {
    return (HDFLibrary.GRwriteimage (arg0, arg1, arg2, arg3, arg4));
  } // GRwriteimage

  public synchronized boolean GRwritelut (int arg0, int arg1, int arg2, int arg3, int arg4, byte[] arg5) throws HDFException {
    return (HDFLibrary.GRwritelut (arg0, arg1, arg2, arg3, arg4, arg5));
  } // GRwritelut

  public synchronized boolean GRwritelut (int arg0, int arg1, int arg2, int arg3, int arg4, Object arg5) throws HDFException {
    return (HDFLibrary.GRwritelut (arg0, arg1, arg2, arg3, arg4, arg5));
  } // GRwritelut

  public synchronized boolean GRreadchunk (int arg0, int[] arg1, byte[] arg2) throws HDFException {
    return (HDFLibrary.GRreadchunk (arg0, arg1, arg2));
  } // GRreadchunk

  public synchronized boolean GRreadchunk (int arg0, int[] arg1, Object arg2) throws HDFException {
    return (HDFLibrary.GRreadchunk (arg0, arg1, arg2));
  } // GRreadchunk

  public synchronized boolean HDFclose (int arg0) throws HDFException {
    return (HDFLibrary.HDFclose (arg0));
  } // HDFclose

  public synchronized int HDFopen (String arg0, int arg1, short arg2) throws HDFException {
    return (HDFLibrary.HDFopen (arg0, arg1, arg2));
  } // HDFopen

  public synchronized short HEvalue (int arg0) throws HDFException {
    return (HDFLibrary.HEvalue (arg0));
  } // HEvalue

  public synchronized String HEstring (int arg0) throws HDFException {
    return (HDFLibrary.HEstring (arg0));
  } // HEstring

  public synchronized boolean HXsetcreatedir (String arg0) throws HDFException {
    return (HDFLibrary.HXsetcreatedir (arg0));
  } // HXsetcreatedir

  public synchronized boolean HXsetdir (String arg0) throws HDFException {
    return (HDFLibrary.HXsetdir (arg0));
  } // HXsetdir

  public synchronized int SDstart (String arg0, int arg1) throws HDFException {
    return (HDFLibrary.SDstart (arg0, arg1));
  } // SDstart

  public synchronized boolean SDend (int arg0) throws HDFException {
    return (HDFLibrary.SDend (arg0));
  } // SDend

  public synchronized boolean SDfileinfo (int arg0, int[] arg1) throws HDFException {
    return (HDFLibrary.SDfileinfo (arg0, arg1));
  } // SDfileinfo

  public synchronized int SDselect (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.SDselect (arg0, arg1));
  } // SDselect

  public synchronized int SDnametoindex (int arg0, String arg1) throws HDFException {
    return (HDFLibrary.SDnametoindex (arg0, arg1));
  } // SDnametoindex

  public synchronized boolean SDgetinfo (int arg0, String[] arg1, int[] arg2, int[] arg3) throws HDFException {
    return (HDFLibrary.SDgetinfo (arg0, arg1, arg2, arg3));
  } // SDgetinfo

  public synchronized boolean SDcheckempty (int arg0, int[] arg1) throws HDFException {
    return (HDFLibrary.SDcheckempty (arg0, arg1));
  } // SDcheckempty

  public synchronized boolean SDreaddata (int arg0, int[] arg1, int[] arg2, int[] arg3, byte[] arg4) throws HDFException {
    return (HDFLibrary.SDreaddata (arg0, arg1, arg2, arg3, arg4));
  } // SDreaddata

  public synchronized boolean SDreaddata (int arg0, int[] arg1, int[] arg2, int[] arg3, Object arg4) throws HDFException {
    return (HDFLibrary.SDreaddata (arg0, arg1, arg2, arg3, arg4));
  } // SDreaddata

  public synchronized boolean SDendaccess (int arg0) throws HDFException {
    return (HDFLibrary.SDendaccess (arg0));
  } // SDendaccess

  public synchronized int SDgetdimid (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.SDgetdimid (arg0, arg1));
  } // SDgetdimid

  public synchronized boolean SDdiminfo (int arg0, String[] arg1, int[] arg2) throws HDFException {
    return (HDFLibrary.SDdiminfo (arg0, arg1, arg2));
  } // SDdiminfo

  public synchronized int SDidtoref (int arg0) throws HDFException {
    return (HDFLibrary.SDidtoref (arg0));
  } // SDidtoref

  public synchronized int SDreftoindex (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.SDreftoindex (arg0, arg1));
  } // SDreftoindex

  public synchronized boolean SDattrinfo (int arg0, int arg1, String[] arg2, int[] arg3) throws HDFException {
    return (HDFLibrary.SDattrinfo (arg0, arg1, arg2, arg3));
  } // SDattrinfo

  public synchronized boolean SDreadattr (int arg0, int arg1, byte[] arg2) throws HDFException {
    return (HDFLibrary.SDreadattr (arg0, arg1, arg2));
  } // SDreadattr

  public synchronized boolean SDreadattr (int arg0, int arg1, Object arg2) throws HDFException {
    return (HDFLibrary.SDreadattr (arg0, arg1, arg2));
  } // SDreadattr

  public synchronized int SDfindattr (int arg0, String arg1) throws HDFException {
    return (HDFLibrary.SDfindattr (arg0, arg1));
  } // SDfindattr

  public synchronized boolean SDiscoordvar (int arg0) throws HDFException {
    return (HDFLibrary.SDiscoordvar (arg0));
  } // SDiscoordvar

  public synchronized boolean SDgetcal (int arg0, double[] arg1, int[] arg2) throws HDFException {
    return (HDFLibrary.SDgetcal (arg0, arg1, arg2));
  } // SDgetcal

  public synchronized boolean SDgetdatastrs (int arg0, String[] arg1, int arg2) throws HDFException {
    return (HDFLibrary.SDgetdatastrs (arg0, arg1, arg2));
  } // SDgetdatastrs

  public synchronized boolean SDgetdimstrs (int arg0, String[] arg1, int arg2) throws HDFException {
    return (HDFLibrary.SDgetdimstrs (arg0, arg1, arg2));
  } // SDgetdimstrs

  public synchronized boolean SDgetdimscale (int arg0, Object arg1) throws HDFException {
    return (HDFLibrary.SDgetdimscale (arg0, arg1));
  } // SDgetdimscale

  public synchronized boolean SDgetdimscale (int arg0, byte[] arg1) throws HDFException {
    return (HDFLibrary.SDgetdimscale (arg0, arg1));
  } // SDgetdimscale

  public synchronized boolean SDgetfillvalue (int arg0, Object[] arg1) throws HDFException {
    return (HDFLibrary.SDgetfillvalue (arg0, arg1));
  } // SDgetfillvalue

  public synchronized boolean SDgetfillvalue (int arg0, byte[] arg1) throws HDFException {
    return (HDFLibrary.SDgetfillvalue (arg0, arg1));
  } // SDgetfillvalue

  public synchronized boolean SDgetrange (int arg0, double[] arg1) throws HDFException {
    return (HDFLibrary.SDgetrange (arg0, arg1));
  } // SDgetrange

  public synchronized boolean SDgetrange (int arg0, byte[] arg1, byte[] arg2) throws HDFException {
    return (HDFLibrary.SDgetrange (arg0, arg1, arg2));
  } // SDgetrange

  public synchronized int SDcreate (int arg0, String arg1, int arg2, int arg3, int[] arg4) throws HDFException {
    return (HDFLibrary.SDcreate (arg0, arg1, arg2, arg3, arg4));
  } // SDcreate

  public synchronized boolean SDisrecord (int arg0) throws HDFException {
    return (HDFLibrary.SDisrecord (arg0));
  } // SDisrecord

  public synchronized boolean SDsetattr (int arg0, String arg1, int arg2, int arg3, byte[] arg4) throws HDFException {
    return (HDFLibrary.SDsetattr (arg0, arg1, arg2, arg3, arg4));
  } // SDsetattr

  public synchronized boolean SDsetattr (int arg0, String arg1, int arg2, int arg3, Object arg4) throws HDFException {
    return (HDFLibrary.SDsetattr (arg0, arg1, arg2, arg3, arg4));
  } // SDsetattr

  public synchronized boolean SDsetcal (int arg0, double arg1, double arg2, double arg3, double arg4, int arg5) throws HDFException {
    return (HDFLibrary.SDsetcal (arg0, arg1, arg2, arg3, arg4, arg5));
  } // SDsetcal

  public synchronized boolean SDsetdatastrs (int arg0, String arg1, String arg2, String arg3, String arg4) throws HDFException {
    return (HDFLibrary.SDsetdatastrs (arg0, arg1, arg2, arg3, arg4));
  } // SDsetdatastrs

  public synchronized boolean SDsetdimname (int arg0, String arg1) throws HDFException {
    return (HDFLibrary.SDsetdimname (arg0, arg1));
  } // SDsetdimname

  public synchronized boolean SDsetdimscale (int arg0, int arg1, int arg2, byte[] arg3) throws HDFException {
    return (HDFLibrary.SDsetdimscale (arg0, arg1, arg2, arg3));
  } // SDsetdimscale

  public synchronized boolean SDsetdimscale (int arg0, int arg1, int arg2, Object arg3) throws HDFException {
    return (HDFLibrary.SDsetdimscale (arg0, arg1, arg2, arg3));
  } // SDsetdimscale

  public synchronized boolean SDsetdimstrs (int arg0, String arg1, String arg2, String arg3) throws HDFException {
    return (HDFLibrary.SDsetdimstrs (arg0, arg1, arg2, arg3));
  } // SDsetdimstrs

  public synchronized boolean SDsetexternalfile (int arg0, String arg1, int arg2) throws HDFException {
    return (HDFLibrary.SDsetexternalfile (arg0, arg1, arg2));
  } // SDsetexternalfile

  public synchronized boolean SDsetfillvalue (int arg0, byte[] arg1) throws HDFException {
    return (HDFLibrary.SDsetfillvalue (arg0, arg1));
  } // SDsetfillvalue

  public synchronized boolean SDsetfillvalue (int arg0, Object arg1) throws HDFException {
    return (HDFLibrary.SDsetfillvalue (arg0, arg1));
  } // SDsetfillvalue

  public synchronized boolean SDsetrange (int arg0, byte[] arg1, byte[] arg2) throws HDFException {
    return (HDFLibrary.SDsetrange (arg0, arg1, arg2));
  } // SDsetrange

  public synchronized boolean SDsetrange (int arg0, Object arg1, Object arg2) throws HDFException {
    return (HDFLibrary.SDsetrange (arg0, arg1, arg2));
  } // SDsetrange

  public synchronized boolean SDwritedata (int arg0, int[] arg1, int[] arg2, int[] arg3, byte[] arg4) throws HDFException {
    return (HDFLibrary.SDwritedata (arg0, arg1, arg2, arg3, arg4));
  } // SDwritedata

  public synchronized boolean SDwritedata (int arg0, int[] arg1, int[] arg2, int[] arg3, Object arg4) throws HDFException {
    return (HDFLibrary.SDwritedata (arg0, arg1, arg2, arg3, arg4));
  } // SDwritedata

  public synchronized boolean SDsetnbitdataset (int arg0, int arg1, int arg2, int arg3, int arg4) throws HDFException {
    return (HDFLibrary.SDsetnbitdataset (arg0, arg1, arg2, arg3, arg4));
  } // SDsetnbitdataset

  public synchronized boolean SDsetcompress (int arg0, int arg1, HDFCompInfo arg2) throws HDFException {
    return (HDFLibrary.SDsetcompress (arg0, arg1, arg2));
  } // SDsetcompress

  public synchronized boolean SDgetcompress (int arg0, HDFCompInfo arg1) throws HDFException {
    return (HDFLibrary.SDgetcompress (arg0, arg1));
  } // SDgetcompress

  public synchronized boolean SDsetaccesstype (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.SDsetaccesstype (arg0, arg1));
  } // SDsetaccesstype

  public synchronized boolean SDsetblocksize (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.SDsetblocksize (arg0, arg1));
  } // SDsetblocksize

  public synchronized boolean SDsetfillmode (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.SDsetfillmode (arg0, arg1));
  } // SDsetfillmode

  public synchronized boolean SDsetfillmode (int arg0, boolean arg1) throws HDFException {
    return (HDFLibrary.SDsetfillmode (arg0, arg1));
  } // SDsetfillmode

  public synchronized boolean SDsetdimval_comp (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.SDsetdimval_comp (arg0, arg1));
  } // SDsetdimval_comp

  public synchronized boolean SDisdimval_bwcomp (int arg0) throws HDFException {
    return (HDFLibrary.SDisdimval_bwcomp (arg0));
  } // SDisdimval_bwcomp

  public synchronized boolean SDsetchunk (int arg0, HDFChunkInfo arg1, int arg2) throws HDFException {
    return (HDFLibrary.SDsetchunk (arg0, arg1, arg2));
  } // SDsetchunk

  public synchronized boolean SDgetchunkinfo (int arg0, HDFChunkInfo arg1, int[] arg2) throws HDFException {
    return (HDFLibrary.SDgetchunkinfo (arg0, arg1, arg2));
  } // SDgetchunkinfo

  public synchronized boolean SDreadchunk (int arg0, int[] arg1, byte[] arg2) throws HDFException {
    return (HDFLibrary.SDreadchunk (arg0, arg1, arg2));
  } // SDreadchunk

  public synchronized boolean SDreadchunk (int arg0, int[] arg1, Object arg2) throws HDFException {
    return (HDFLibrary.SDreadchunk (arg0, arg1, arg2));
  } // SDreadchunk

  public synchronized int SDsetchunkcache (int arg0, int arg1, int arg2) throws HDFException {
    return (HDFLibrary.SDsetchunkcache (arg0, arg1, arg2));
  } // SDsetchunkcache

  public synchronized boolean SDwritechunk (int arg0, int[] arg1, Object arg2) throws HDFException {
    return (HDFLibrary.SDwritechunk (arg0, arg1, arg2));
  } // SDwritechunk

  public synchronized boolean SDwritechunk (int arg0, int[] arg1, byte[] arg2) throws HDFException {
    return (HDFLibrary.SDwritechunk (arg0, arg1, arg2));
  } // SDwritechunk

  public synchronized int VFfieldesize (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.VFfieldesize (arg0, arg1));
  } // VFfieldesize

  public synchronized int VFfieldisize (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.VFfieldisize (arg0, arg1));
  } // VFfieldisize

  public synchronized String VFfieldname (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.VFfieldname (arg0, arg1));
  } // VFfieldname

  public synchronized int VFfieldorder (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.VFfieldorder (arg0, arg1));
  } // VFfieldorder

  public synchronized int VFfieldtype (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.VFfieldtype (arg0, arg1));
  } // VFfieldtype

  public synchronized int VFnfields (int arg0) throws HDFException {
    return (HDFLibrary.VFnfields (arg0));
  } // VFnfields

  public synchronized int VHmakegroup (int arg0, int[] arg1, int[] arg2, int arg3, String arg4, String arg5) throws HDFException {
    return (HDFLibrary.VHmakegroup (arg0, arg1, arg2, arg3, arg4, arg5));
  } // VHmakegroup

  public synchronized int VHstoredata (int arg0, String arg1, byte[] arg2, int arg3, int arg4, String arg5, String arg6) throws HDFException {
    return (HDFLibrary.VHstoredata (arg0, arg1, arg2, arg3, arg4, arg5, arg6));
  } // VHstoredata

  public synchronized int VHstoredata (int arg0, String arg1, Object arg2, int arg3, int arg4, String arg5, String arg6) throws HDFException {
    return (HDFLibrary.VHstoredata (arg0, arg1, arg2, arg3, arg4, arg5, arg6));
  } // VHstoredata

  public synchronized int VHstoredatam (int arg0, String arg1, Object arg2, int arg3, int arg4, String arg5, String arg6, int arg7) throws HDFException {
    return (HDFLibrary.VHstoredatam (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7));
  } // VHstoredatam

  public synchronized int VHstoredatam (int arg0, String arg1, byte[] arg2, int arg3, int arg4, String arg5, String arg6, int arg7) throws HDFException {
    return (HDFLibrary.VHstoredatam (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7));
  } // VHstoredatam

  public synchronized int VQueryref (int arg0) throws HDFException {
    return (HDFLibrary.VQueryref (arg0));
  } // VQueryref

  public synchronized int VQuerytag (int arg0) throws HDFException {
    return (HDFLibrary.VQuerytag (arg0));
  } // VQuerytag

  public synchronized boolean VSQuerycount (int arg0, int[] arg1) throws HDFException {
    return (HDFLibrary.VSQuerycount (arg0, arg1));
  } // VSQuerycount

  public synchronized boolean VSQueryfields (int arg0, String[] arg1) throws HDFException {
    return (HDFLibrary.VSQueryfields (arg0, arg1));
  } // VSQueryfields

  public synchronized boolean VSQueryinterlace (int arg0, int[] arg1) throws HDFException {
    return (HDFLibrary.VSQueryinterlace (arg0, arg1));
  } // VSQueryinterlace

  public synchronized boolean VSQueryname (int arg0, String[] arg1) throws HDFException {
    return (HDFLibrary.VSQueryname (arg0, arg1));
  } // VSQueryname

  public synchronized int VSQueryref (int arg0) throws HDFException {
    return (HDFLibrary.VSQueryref (arg0));
  } // VSQueryref

  public synchronized int VSQuerytag (int arg0) throws HDFException {
    return (HDFLibrary.VSQuerytag (arg0));
  } // VSQuerytag

  public synchronized boolean VSQueryvsize (int arg0, int[] arg1) throws HDFException {
    return (HDFLibrary.VSQueryvsize (arg0, arg1));
  } // VSQueryvsize

  public synchronized int VSattach (int arg0, int arg1, String arg2) throws HDFException {
    return (HDFLibrary.VSattach (arg0, arg1, arg2));
  } // VSattach

  public synchronized void VSdetach (int arg0) throws HDFException {
    HDFLibrary.VSdetach (arg0);
  } // VSdetach

  public synchronized int VSgetid (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.VSgetid (arg0, arg1));
  } // VSgetid

  public synchronized void VSgetclass (int arg0, String[] arg1) throws HDFException {
    HDFLibrary.VSgetclass (arg0, arg1);
  } // VSgetclass

  public synchronized void VSgetname (int arg0, String[] arg1) throws HDFException {
    HDFLibrary.VSgetname (arg0, arg1);
  } // VSgetname

  public synchronized int VSelts (int arg0) throws HDFException {
    return (HDFLibrary.VSelts (arg0));
  } // VSelts

  public synchronized boolean VSfdefine (int arg0, String arg1, int arg2, int arg3) throws HDFException {
    return (HDFLibrary.VSfdefine (arg0, arg1, arg2, arg3));
  } // VSfdefine

  public synchronized boolean VSfexist (int arg0, String arg1) throws HDFException {
    return (HDFLibrary.VSfexist (arg0, arg1));
  } // VSfexist

  public synchronized int VSfind (int arg0, String arg1) throws HDFException {
    return (HDFLibrary.VSfind (arg0, arg1));
  } // VSfind

  public synchronized int VSsetblocksize (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.VSsetblocksize (arg0, arg1));
  } // VSsetblocksize

  public synchronized int VSsetnumblocks (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.VSsetnumblocks (arg0, arg1));
  } // VSsetnumblocks

  public synchronized int VSgetfields (int arg0, String[] arg1) throws HDFException {
    return (HDFLibrary.VSgetfields (arg0, arg1));
  } // VSgetfields

  public synchronized int VSgetinterlace (int arg0) throws HDFException {
    return (HDFLibrary.VSgetinterlace (arg0));
  } // VSgetinterlace

  public synchronized boolean VSinquire (int arg0, int[] arg1) throws HDFException {
    return (HDFLibrary.VSinquire (arg0, arg1));
  } // VSinquire

  public synchronized boolean VSinquire (int arg0, int[] arg1, String[] arg2) throws HDFException {
    return (HDFLibrary.VSinquire (arg0, arg1, arg2));
  } // VSinquire

  public synchronized int VSlone (int arg0, int[] arg1, int arg2) throws HDFException {
    return (HDFLibrary.VSlone (arg0, arg1, arg2));
  } // VSlone

  public synchronized int VSread (int arg0, byte[] arg1, int arg2, int arg3) throws HDFException {
    return (HDFLibrary.VSread (arg0, arg1, arg2, arg3));
  } // VSread

  public synchronized int VSread (int arg0, Object arg1, int arg2, int arg3) throws HDFException {
    return (HDFLibrary.VSread (arg0, arg1, arg2, arg3));
  } // VSread

  public synchronized int VSseek (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.VSseek (arg0, arg1));
  } // VSseek

  public synchronized boolean VSsetfields (int arg0, String arg1) throws HDFException {
    return (HDFLibrary.VSsetfields (arg0, arg1));
  } // VSsetfields

  public synchronized boolean VSsetinterlace (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.VSsetinterlace (arg0, arg1));
  } // VSsetinterlace

  public synchronized int VSsizeof (int arg0, String arg1) throws HDFException {
    return (HDFLibrary.VSsizeof (arg0, arg1));
  } // VSsizeof

  public synchronized boolean VSappendable (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.VSappendable (arg0, arg1));
  } // VSappendable

  public synchronized int VSfindclass (int arg0, String arg1) throws HDFException {
    return (HDFLibrary.VSfindclass (arg0, arg1));
  } // VSfindclass

  public synchronized int VSgetversion (int arg0) throws HDFException {
    return (HDFLibrary.VSgetversion (arg0));
  } // VSgetversion

  public synchronized void VSsetclass (int arg0, String arg1) throws HDFException {
    HDFLibrary.VSsetclass (arg0, arg1);
  } // VSsetclass

  public synchronized boolean VSsetexternalfile (int arg0, String arg1, int arg2) throws HDFException {
    return (HDFLibrary.VSsetexternalfile (arg0, arg1, arg2));
  } // VSsetexternalfile

  public synchronized void VSsetname (int arg0, String arg1) throws HDFException {
    HDFLibrary.VSsetname (arg0, arg1);
  } // VSsetname

  public synchronized int VSwrite (int arg0, Object arg1, int arg2, int arg3) throws HDFException {
    return (HDFLibrary.VSwrite (arg0, arg1, arg2, arg3));
  } // VSwrite

  public synchronized int VSwrite (int arg0, byte[] arg1, int arg2, int arg3) throws HDFException {
    return (HDFLibrary.VSwrite (arg0, arg1, arg2, arg3));
  } // VSwrite

  public synchronized boolean Vstart (int arg0) throws HDFException {
    return (HDFLibrary.Vstart (arg0));
  } // Vstart

  public synchronized int Vattach (int arg0, int arg1, String arg2) throws HDFException {
    return (HDFLibrary.Vattach (arg0, arg1, arg2));
  } // Vattach

  public synchronized void Vdetach (int arg0) throws HDFException {
    HDFLibrary.Vdetach (arg0);
  } // Vdetach

  public synchronized void Vend (int arg0) throws HDFException {
    HDFLibrary.Vend (arg0);
  } // Vend

  public synchronized int Vgetid (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.Vgetid (arg0, arg1));
  } // Vgetid

  public synchronized void Vgetclass (int arg0, String[] arg1) throws HDFException {
    HDFLibrary.Vgetclass (arg0, arg1);
  } // Vgetclass

  public synchronized void Vgetname (int arg0, String[] arg1) throws HDFException {
    HDFLibrary.Vgetname (arg0, arg1);
  } // Vgetname

  public synchronized boolean Visvg (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.Visvg (arg0, arg1));
  } // Visvg

  public synchronized boolean Visvs (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.Visvs (arg0, arg1));
  } // Visvs

  public synchronized int Vgettagrefs (int arg0, int[] arg1, int[] arg2, int arg3) throws HDFException {
    return (HDFLibrary.Vgettagrefs (arg0, arg1, arg2, arg3));
  } // Vgettagrefs

  public synchronized boolean Vgettagref (int arg0, int arg1, int[] arg2) throws HDFException {
    return (HDFLibrary.Vgettagref (arg0, arg1, arg2));
  } // Vgettagref

  public synchronized int Vntagrefs (int arg0) throws HDFException {
    return (HDFLibrary.Vntagrefs (arg0));
  } // Vntagrefs

  public synchronized boolean Vinqtagref (int arg0, int arg1, int arg2) throws HDFException {
    return (HDFLibrary.Vinqtagref (arg0, arg1, arg2));
  } // Vinqtagref

  public synchronized int Vlone (int arg0, int[] arg1, int arg2) throws HDFException {
    return (HDFLibrary.Vlone (arg0, arg1, arg2));
  } // Vlone

  public synchronized int Vaddtagref (int arg0, int arg1, int arg2) throws HDFException {
    return (HDFLibrary.Vaddtagref (arg0, arg1, arg2));
  } // Vaddtagref

  public synchronized int Vdeletetagref (int arg0, int arg1, int arg2) throws HDFException {
    return (HDFLibrary.Vdeletetagref (arg0, arg1, arg2));
  } // Vdeletetagref

  public synchronized int Vfind (int arg0, String arg1) throws HDFException {
    return (HDFLibrary.Vfind (arg0, arg1));
  } // Vfind

  public synchronized int Vfindclass (int arg0, String arg1) throws HDFException {
    return (HDFLibrary.Vfindclass (arg0, arg1));
  } // Vfindclass

  public synchronized int Vflocate (int arg0, String arg1) throws HDFException {
    return (HDFLibrary.Vflocate (arg0, arg1));
  } // Vflocate

  public synchronized int Vgetnext (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.Vgetnext (arg0, arg1));
  } // Vgetnext

  public synchronized boolean Vinquire (int arg0, int[] arg1, String[] arg2) throws HDFException {
    return (HDFLibrary.Vinquire (arg0, arg1, arg2));
  } // Vinquire

  public synchronized int Vinsert (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.Vinsert (arg0, arg1));
  } // Vinsert

  public synchronized int Vnrefs (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.Vnrefs (arg0, arg1));
  } // Vnrefs

  public synchronized boolean Vsetclass (int arg0, String arg1) throws HDFException {
    return (HDFLibrary.Vsetclass (arg0, arg1));
  } // Vsetclass

  public synchronized boolean Vsetname (int arg0, String arg1) throws HDFException {
    return (HDFLibrary.Vsetname (arg0, arg1));
  } // Vsetname

  public synchronized boolean Vattrinfo (int arg0, int arg1, String[] arg2, int[] arg3) throws HDFException {
    return (HDFLibrary.Vattrinfo (arg0, arg1, arg2, arg3));
  } // Vattrinfo

  public synchronized int Vfindattr (int arg0, String arg1) throws HDFException {
    return (HDFLibrary.Vfindattr (arg0, arg1));
  } // Vfindattr

  public synchronized boolean Vgetattr (int arg0, int arg1, byte[] arg2) throws HDFException {
    return (HDFLibrary.Vgetattr (arg0, arg1, arg2));
  } // Vgetattr

  public synchronized boolean Vgetattr (int arg0, int arg1, Object arg2) throws HDFException {
    return (HDFLibrary.Vgetattr (arg0, arg1, arg2));
  } // Vgetattr

  public synchronized int Vgetversion (int arg0) throws HDFException {
    return (HDFLibrary.Vgetversion (arg0));
  } // Vgetversion

  public synchronized int Vnattrs (int arg0) throws HDFException {
    return (HDFLibrary.Vnattrs (arg0));
  } // Vnattrs

  public synchronized boolean Vsetattr (int arg0, String arg1, int arg2, int arg3, Object arg4) throws HDFException {
    return (HDFLibrary.Vsetattr (arg0, arg1, arg2, arg3, arg4));
  } // Vsetattr

  public synchronized boolean Vsetattr (int arg0, String arg1, int arg2, int arg3, byte[] arg4) throws HDFException {
    return (HDFLibrary.Vsetattr (arg0, arg1, arg2, arg3, arg4));
  } // Vsetattr

  public synchronized boolean Vsetattr (int arg0, String arg1, int arg2, int arg3, String arg4) throws HDFException {
    return (HDFLibrary.Vsetattr (arg0, arg1, arg2, arg3, arg4));
  } // Vsetattr

  public synchronized boolean VSattrinfo (int arg0, int arg1, int arg2, String[] arg3, int[] arg4) throws HDFException {
    return (HDFLibrary.VSattrinfo (arg0, arg1, arg2, arg3, arg4));
  } // VSattrinfo

  public synchronized int VSfindex (int arg0, String arg1, int[] arg2) throws HDFException {
    return (HDFLibrary.VSfindex (arg0, arg1, arg2));
  } // VSfindex

  public synchronized int VSfindattr (int arg0, int arg1, String arg2) throws HDFException {
    return (HDFLibrary.VSfindattr (arg0, arg1, arg2));
  } // VSfindattr

  public synchronized int VSfnattrs (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.VSfnattrs (arg0, arg1));
  } // VSfnattrs

  public synchronized boolean VSgetattr (int arg0, int arg1, int arg2, Object arg3) throws HDFException {
    return (HDFLibrary.VSgetattr (arg0, arg1, arg2, arg3));
  } // VSgetattr

  public synchronized boolean VSgetattr (int arg0, int arg1, int arg2, byte[] arg3) throws HDFException {
    return (HDFLibrary.VSgetattr (arg0, arg1, arg2, arg3));
  } // VSgetattr

  public synchronized boolean VSisattr (int arg0) throws HDFException {
    return (HDFLibrary.VSisattr (arg0));
  } // VSisattr

  public synchronized int VSnattrs (int arg0) throws HDFException {
    return (HDFLibrary.VSnattrs (arg0));
  } // VSnattrs

  public synchronized boolean VSsetattr (int arg0, int arg1, String arg2, int arg3, int arg4, String arg5) throws HDFException {
    return (HDFLibrary.VSsetattr (arg0, arg1, arg2, arg3, arg4, arg5));
  } // VSsetattr

  public synchronized boolean VSsetattr (int arg0, int arg1, String arg2, int arg3, int arg4, Object arg5) throws HDFException {
    return (HDFLibrary.VSsetattr (arg0, arg1, arg2, arg3, arg4, arg5));
  } // VSsetattr

  public synchronized boolean VSsetattr (int arg0, int arg1, String arg2, int arg3, int arg4, byte[] arg5) throws HDFException {
    return (HDFLibrary.VSsetattr (arg0, arg1, arg2, arg3, arg4, arg5));
  } // VSsetattr

  public synchronized boolean DF24getdims (String arg0, int[] arg1) throws HDFException {
    return (HDFLibrary.DF24getdims (arg0, arg1));
  } // DF24getdims

  public synchronized boolean DF24reqil (int arg0) throws HDFException {
    return (HDFLibrary.DF24reqil (arg0));
  } // DF24reqil

  public synchronized boolean DF24getimage (String arg0, Object arg1, int arg2, int arg3) throws HDFException {
    return (HDFLibrary.DF24getimage (arg0, arg1, arg2, arg3));
  } // DF24getimage

  public synchronized boolean DF24getimage (String arg0, byte[] arg1, int arg2, int arg3) throws HDFException {
    return (HDFLibrary.DF24getimage (arg0, arg1, arg2, arg3));
  } // DF24getimage

  public synchronized short DF24lastref () throws HDFException {
    return (HDFLibrary.DF24lastref ());
  } // DF24lastref

  public synchronized boolean DF24restart () throws HDFException {
    return (HDFLibrary.DF24restart ());
  } // DF24restart

  public synchronized boolean DF24readref (String arg0, int arg1) throws HDFException {
    return (HDFLibrary.DF24readref (arg0, arg1));
  } // DF24readref

  public synchronized int DF24nimages (String arg0) throws HDFException {
    return (HDFLibrary.DF24nimages (arg0));
  } // DF24nimages

  public synchronized boolean DF24addimage (String arg0, byte[] arg1, int arg2, int arg3) throws HDFException {
    return (HDFLibrary.DF24addimage (arg0, arg1, arg2, arg3));
  } // DF24addimage

  public synchronized boolean DF24addimage (String arg0, Object arg1, int arg2, int arg3) throws HDFException {
    return (HDFLibrary.DF24addimage (arg0, arg1, arg2, arg3));
  } // DF24addimage

  public synchronized boolean DF24putimage (String arg0, byte[] arg1, int arg2, int arg3) throws HDFException {
    return (HDFLibrary.DF24putimage (arg0, arg1, arg2, arg3));
  } // DF24putimage

  public synchronized boolean DF24putimage (String arg0, Object arg1, int arg2, int arg3) throws HDFException {
    return (HDFLibrary.DF24putimage (arg0, arg1, arg2, arg3));
  } // DF24putimage

  public synchronized boolean DF24setcompress (int arg0, HDFCompInfo arg1) throws HDFException {
    return (HDFLibrary.DF24setcompress (arg0, arg1));
  } // DF24setcompress

  public synchronized boolean DF24setdims (int arg0, int arg1) throws HDFException {
    return (HDFLibrary.DF24setdims (arg0, arg1));
  } // DF24setdims

  public synchronized boolean DF24setil (int arg0) throws HDFException {
    return (HDFLibrary.DF24setil (arg0));
  } // DF24setil

  public synchronized boolean DFR8getdims (String arg0, int[] arg1, boolean[] arg2) throws HDFException {
    return (HDFLibrary.DFR8getdims (arg0, arg1, arg2));
  } // DFR8getdims

  public synchronized boolean DFR8getimage (String arg0, byte[] arg1, int arg2, int arg3, byte[] arg4) throws HDFException {
    return (HDFLibrary.DFR8getimage (arg0, arg1, arg2, arg3, arg4));
  } // DFR8getimage

  public synchronized boolean DFR8getimage (String arg0, Object arg1, int arg2, int arg3, byte[] arg4) throws HDFException {
    return (HDFLibrary.DFR8getimage (arg0, arg1, arg2, arg3, arg4));
  } // DFR8getimage

  public synchronized short DFR8lastref () throws HDFException {
    return (HDFLibrary.DFR8lastref ());
  } // DFR8lastref

  public synchronized boolean DFR8restart () throws HDFException {
    return (HDFLibrary.DFR8restart ());
  } // DFR8restart

  public synchronized boolean DFR8readref (String arg0, int arg1) throws HDFException {
    return (HDFLibrary.DFR8readref (arg0, arg1));
  } // DFR8readref

  public synchronized int DFR8nimages (String arg0) throws HDFException {
    return (HDFLibrary.DFR8nimages (arg0));
  } // DFR8nimages

  public synchronized boolean DFR8addimage (String arg0, byte[] arg1, int arg2, int arg3, short arg4) throws HDFException {
    return (HDFLibrary.DFR8addimage (arg0, arg1, arg2, arg3, arg4));
  } // DFR8addimage

  public synchronized boolean DFR8addimage (String arg0, Object arg1, int arg2, int arg3, short arg4) throws HDFException {
    return (HDFLibrary.DFR8addimage (arg0, arg1, arg2, arg3, arg4));
  } // DFR8addimage

  public synchronized boolean DFR8putimage (String arg0, byte[] arg1, int arg2, int arg3, short arg4) throws HDFException {
    return (HDFLibrary.DFR8putimage (arg0, arg1, arg2, arg3, arg4));
  } // DFR8putimage

  public synchronized boolean DFR8putimage (String arg0, Object arg1, int arg2, int arg3, short arg4) throws HDFException {
    return (HDFLibrary.DFR8putimage (arg0, arg1, arg2, arg3, arg4));
  } // DFR8putimage

  public synchronized boolean DFR8setcompress (int arg0, HDFCompInfo arg1) throws HDFException {
    return (HDFLibrary.DFR8setcompress (arg0, arg1));
  } // DFR8setcompress

  public synchronized boolean DFR8getpalref (short[] arg0) throws HDFException {
    return (HDFLibrary.DFR8getpalref (arg0));
  } // DFR8getpalref

  public synchronized boolean DFR8setpalette (byte[] arg0) throws HDFException {
    return (HDFLibrary.DFR8setpalette (arg0));
  } // DFR8setpalette

  public synchronized boolean DFR8writeref (String arg0, short arg1) throws HDFException {
    return (HDFLibrary.DFR8writeref (arg0, arg1));
  } // DFR8writeref

  public synchronized boolean SDreaddata_short (int arg0, int[] arg1, int[] arg2, int[] arg3, short[] arg4) throws HDFException {
    return (HDFLibrary.SDreaddata_short (arg0, arg1, arg2, arg3, arg4));
  } // SDreaddata_short

  public synchronized boolean SDreaddata_int (int arg0, int[] arg1, int[] arg2, int[] arg3, int[] arg4) throws HDFException {
    return (HDFLibrary.SDreaddata_int (arg0, arg1, arg2, arg3, arg4));
  } // SDreaddata_int

  public synchronized boolean SDreaddata_long (int arg0, int[] arg1, int[] arg2, int[] arg3, long[] arg4) throws HDFException {
    return (HDFLibrary.SDreaddata_long (arg0, arg1, arg2, arg3, arg4));
  } // SDreaddata_long

  public synchronized boolean SDreaddata_float (int arg0, int[] arg1, int[] arg2, int[] arg3, float[] arg4) throws HDFException {
    return (HDFLibrary.SDreaddata_float (arg0, arg1, arg2, arg3, arg4));
  } // SDreaddata_float

  public synchronized boolean SDreaddata_double (int arg0, int[] arg1, int[] arg2, int[] arg3, double[] arg4) throws HDFException {
    return (HDFLibrary.SDreaddata_double (arg0, arg1, arg2, arg3, arg4));
  } // SDreaddata_double

  public synchronized int HCget_config_info (int arg0) throws HDFException {
    return (HDFLibrary.HCget_config_info (arg0));
  } // HCget_config_info

  ////////////////////////////////////////////////////////////

  /**
   * Gets a class type name.
   *
   * @param classType the class type to get a name for.
   *
   * @return the class type name as it would appear in source code.
   */
  private static String getTypeName (Class classValue) {

    String name = classValue.getSimpleName();
    name = name.replaceFirst ("java.lang.", "");
    name = name.replaceFirst ("ncsa.hdf.hdflib.", "");

    return (name);
  
  } // getTypeName

  ////////////////////////////////////////////////////////////

  /** 
   * Performs the main method to generate HDF library method signatures.
   * 
   * @param argv the program arguments.
   */
  public static void main (String[] argv) {
  
    for (Method method : HDFLibrary.class.getMethods()) {

      int modifiers = method.getModifiers();
      if (!Modifier.isStatic (modifiers) || !Modifier.isPublic (modifiers)) continue;

      String name = method.getName();
      String retType = getTypeName (method.getReturnType());
      Class[] paramTypes = method.getParameterTypes();
      Class[] exceptTypes = method.getExceptionTypes();
      
      System.out.print ("public synchronized " + retType + " " + name + " (");
      for (int i = 0; i < paramTypes.length; i++) {
        String type = getTypeName (paramTypes[i]);
        System.out.print (type + " arg" + i + (i != paramTypes.length-1 ? ", " : ""));
      } // for
      System.out.print (")");
      if (exceptTypes.length != 0) {
        System.out.print (" throws ");
        for (int i = 0; i < exceptTypes.length; i++) {
          String type = getTypeName (exceptTypes[i]);
          System.out.print (type + (i != exceptTypes.length-1 ? ", " : ""));
        } // for
      } // if
      System.out.println (" {");
      
      boolean isVoid = retType.equals ("void");
      System.out.print ("  " + (!isVoid ? "return (" : "") + "HDFLibrary." + name + " (");
      for (int i = 0; i < paramTypes.length; i++) {
        System.out.print ("arg" + i + (i != paramTypes.length-1 ? ", " : ""));
      } // for
      System.out.println ((!isVoid ? ")" : "") + ");");

      System.out.println ("} // " + name);
      System.out.println();
    
    } // for
  
  } // main

  ////////////////////////////////////////////////////////////

} // HDFLib class

////////////////////////////////////////////////////////////////////////
