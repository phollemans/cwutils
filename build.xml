<!--

     FILE: build.xml
   AUTHOR: Peter Hollemans
     DATE: 2004/03/16

  CoastWatch Software Library and Utilities
  Copyright (c) 2004 National Oceanic and Atmospheric Administration
  All rights reserved.

  Developed by: CoastWatch / OceanWatch
                Center for Satellite Applications and Research
                http://coastwatch.noaa.gov

  For conditions of distribution and use, see the accompanying
  license.txt file.

-->

<project name="cwf" default="classes">

  <!-- Setup global properties -->
  <!-- *********************** -->

  <buildnumber/>
  <property file="cwf.properties"/>
  <tstamp>
    <format property="current.time" pattern="yyyyMMdd_HHmmss"/>
  </tstamp>

  <!-- Define tasks -->
  <!-- ************ -->

  <!-- This is for the install task that builds packages. -->
  <taskdef
    name="install4j" 
    classname="com.install4j.Install4JTask"
    classpath="${install4j.dir}/bin/ant.jar"/>

  <!-- These are the contrib tasks. -->
  <taskdef resource="net/sf/antcontrib/antlib.xml"/>

  <!-- Define Java compile classpath -->
  <!-- ***************************** -->
  
  <path id="cp">
    <!-- The main libraries used by the code. -->
    <fileset dir="lib/java" includes="**/*.jar,**/*.zip"/>
  </path>

  <!-- Add to default excludes -->
  <!-- *********************** -->
  
  <defaultexcludes add="**/.xvpics,**/.xvpics/**"/>

  <!-- Define main compile targets -->
  <!-- *************************** -->
  
  <target name="classes"
    description="Compiles main Java classes in src/">
    <depend srcdir="src" destdir="classes"/>
    <mkdir dir="classes"/>
    <javac 
      srcdir="src" 
      destdir="classes" 
      classpathref="cp" 
      debug="on" 
      deprecation="on"
      includeantruntime="false"
      target="${java.source.version}"
      source="${java.source.version}">
      <compilerarg line="${javac.args}"/>
    </javac>
    <echo
      file="resources/version.properties" 
      message="cwf.version=${version.full} ${current.time}${line.separator}"/>
    <jar destfile="lib/java/cwf.jar">
      <fileset dir="classes"/>
      <fileset dir="resources"/>
    </jar>
  </target>

  <target name="lint"
    description="Compiles main Java classes in src/ with lint checking">
    <depend srcdir="src" destdir="classes"/>
    <mkdir dir="classes"/>
    <javac 
      srcdir="src" 
      destdir="classes" 
      classpathref="cp" 
      debug="on" 
      deprecation="on"
      includeantruntime="false"
      target="${java.source.version}"
      source="${java.source.version}">
      <compilerarg line="${javac.args}"/>
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
    <echo
      file="resources/version.properties" 
      message="cwf.version=${version.full} ${current.time}${line.separator}"/>
    <jar destfile="lib/java/cwf.jar">
      <fileset dir="classes"/>
      <fileset dir="resources"/>
    </jar>
  </target>

  <!-- Define source and API targets -->
  <!-- ***************************** -->
  
  <target name="source"
    description="Creates Java and C source code ZIP file">
    <zip destfile="src.zip">
      <zipfileset dir="src" prefix="src"/>
    </zip>
  </target>

  <target name="api" depends="classes"
    description="Creates Java API documentation">
    <delete dir="doc/api"/>
    <javadoc 
      sourcepath="src" 
      destdir="doc/api" 
      classpathref="cp"
      overview="src/overview.html"
      windowtitle="CoastWatch Utilities v${version}"
      doctitle="CoastWatch Software Library and Utilities v${version} API Specification"
      header="CoastWatch Utils v${version}"
      footer="CoastWatch Utils v${version}">
      <packageset dir="src"/>
      <arg line="-Xmaxwarns 10"/>
    </javadoc>
  </target>

  <target name="doc" depends="api"
    description="Creates Java API documentation, tool manual pages, and user's guide in doc/">
    <delete dir="doc/tools"/>
    <delete dir="doc/man"/>
    <exec executable="${basedir}/scripts/make_docs.sh" dir="doc">
      <arg line="${version}"/>
    </exec>
  </target>

  <target name="test-man" depends="doc"
    description="Copies the CWF man pages into the install directory">
    <copy todir="${install.dir}/doc/man">
      <fileset dir="doc/man"/>
    </copy>
  </target>

  <target name="api-zip"
    description="Creates Java API ZIP file in doc/">
    <zip destfile="doc/api.zip">
      <zipfileset dir="doc/api" prefix="api"/>
    </zip>
  </target>

  <target name="all"
    description="Combines classes, doc, source, and api-zip targets"
    depends="classes,doc,source,api-zip"/>

  <!-- Define package targets -->
  <!-- ********************** -->

  <!--
    For now we leave out Solaris support, because we have no way of testing it.
    If a user asks for it, we can provide a package.
  -->
  <!--  <property name="builds.all" value="linux32,linux64,windows32,windows64,macosx64,solaris32,solaris64"/> -->

  <property name="builds.default" value="linux32,linux64,windows64,macosx64"/>
  <property name="builds.all" value="linux32,linux64,windows32,windows64,macosx64,solaris32,solaris64"/>
  <property name="build.id.linux32" value="88"/>
  <property name="build.id.linux64" value="288"/>
  <property name="build.id.windows32" value="10"/>
  <property name="build.id.windows64" value="278"/>
  <property name="build.id.macosx64" value="276"/>
  <property name="build.id.macosx64.tgz" value="528"/>
  <property name="build.id.solaris32" value="93"/>
  <property name="build.id.solaris64" value="292"/>

  <target name="packages-help" description="Lists packages available to build">
    <echo>Default build set: ${builds.default}</echo>
    <echo>All packages: ${builds.all}</echo>
  </target>

  <target name="packages" depends="all"
    description="Creates package files specified by ${builds}, or default set if no builds specified">

    <!-- Check builds -->
    <if>
      <not><isset property="builds"/></not>
      <then>
        <property name="builds" value="${builds.default}"/>
      </then>
    </if>

    <!-- Convert build names to build IDs -->
    <echo message="Building packages for ${builds}"/>
    <var name="build.ids" value=""/>
    <for list="${builds}" param="build.name">
      <sequential>

        <!-- Set current build ID to append -->
        <var name="build.id.current" value="${build.id.@{build.name}}"/>

        <if>

          <!-- Check build ID is known -->
          <not><matches pattern="^[0-9]*$" string="${build.id.current}"/></not>
          <then>
            <echo message="No build ID found for @{build.name}, ignoring ..."/>
          </then>

          <!-- Add build ID to list -->
          <else>
            <if>
             <not><equals arg1="${build.ids}" arg2=""/></not>
             <then>
               <var name="build.ids" value="${build.ids},"/>
             </then>
            </if>
            <var name="build.ids" value="${build.ids}${build.id.current}"/>
          </else>

        </if>

        <!-- Add build ID to list -->

      </sequential>
    </for>

    <!-- Call install4j task -->
    <install4j
      projectfile="cwf.install4j"
      release="${version.full}"
      buildids="${build.ids}"
      verbose="true">
      <vmParameter value="-Xmx1024m"/>
    </install4j>

  </target>

<!--
  <target name="upload"
    description="Uploads packages to the Terrenus server">
    <input message="Password: " addproperty="password">
      <handler type="secure"/>
    </input>
    <scp todir="terrenus:${password}@terrenus.ca:web/download" verbose="true" sftp="true">
      <fileset dir="${pkg.dir}"/>
    </scp>
    <sshexec
      host="terrenus.ca"
      username="terrenus"
      password="${password}"
      command="cd web/download ; md5sum -c md5sums"/>
  </target>
-->

  <target name="upload"
    description="Uploads the latest packages to the Terrenus server">
    <exec executable="${pkg.dir}/send.sh" dir="${pkg.dir}"/>
    <exec executable="${pkg.dir}/check.sh" dir="${pkg.dir}"/>
  </target>

  <!-- Define cleanup targets -->
  <!-- ********************** -->

  <target name="clean"
    description="Cleans up compiled Java classes, source ZIP, and documentation">
    <delete dir="classes"/>
    <delete dir="doc/api"/>
    <delete verbose="true" quiet="true" includeemptydirs="true">
      <fileset file="lib/java/cwf.jar"/>
      <fileset file="src.zip"/>
      <fileset dir="doc/tools"/>
      <fileset dir="doc/man"/>
      <fileset dir="doc">
        <include name="api.zip"/>
        <include name="cwf_ug_*.pdf"/>
      </fileset>
      <fileset dir="doc/users_guide" excludes="*.tex,*.bib,figures/*,icons/*"/>
      <fileset dir="data/noaa/coastwatch/tools/test">
        <include name="test-*"/>
      </fileset>
    </delete>
  </target>

  <target name="clean-packages"
    description="Deletes all packages">
    <delete>
      <fileset dir="${pkg.dir}" includes="**/*"/>
    </delete>
  </target>

  <!-- Define test targets -->
  <!-- ******************* -->
  
  <target name="test-jar" depends="classes"
    description="Copies the CWF jar file into the install directory for direct in-situ testing">
    <copy file="lib/java/cwf.jar" todir="${install.dir}/lib/java"/>
  </target>
  
  <path id="test.class.path">
    <fileset dir="lib/java" includes="**/*.jar,**/*.zip"/>
    <pathelement location="data"/>
    <pathelement location="extensions"/>
    <pathelement location="${java.home}/lib/plugin.jar"/>
  </path>

  <target name="test" depends="classes"
    description="Tests the Java class ${class} by calling its main() method with arguments ${args}">
    <java 
      classname="${class}" 
      classpathref="test.class.path"
      fork="true">
      <env key="${ld.var}" value="${basedir}/lib/native/${os.libs}"/>
      <jvmarg line="${vm.args} -Djna.library.path='${basedir}/lib/native/${os.libs}' -ea:noaa.coastwatch..."/>
      <arg line="${args}"/>
    </java>
  </target>

  <target name="test-cdat"
    description="Tests CDAT by calling its main() method with no arguments">
    <antcall target="test">
      <param name="class" value="noaa.coastwatch.tools.cdat"/>
      <param name="args" value=""/>
    </antcall>
  </target>

  <target name="test-cwmaster"
    description="Tests cwmaster by calling its main() method with no arguments">
    <antcall target="test">
      <param name="class" value="noaa.coastwatch.tools.cwmaster"/>
      <param name="args" value=""/>
    </antcall>
  </target>

  <target name="test-info"
    description="Tests the cwinfo tool by calling its main() method with arguments ${args}">
    <antcall target="test">
      <param name="class" value="noaa.coastwatch.tools.cwinfo"/>
    </antcall>
  </target>

  <target name="test-tool"
    description="Tests a CoastWatch tool named ${tool} by calling its main() method with arguments ${args}">
    <antcall target="test">
      <param name="class" value="noaa.coastwatch.tools.${tool}"/>
    </antcall>
  </target>

  <target name="test-suite"
    description="Runs the CoastWatch test suite by calling cwtoolstest">
    <antcall target="test">
      <param name="class" value="noaa.coastwatch.tools.cwtoolstest"/>
      <param name="args" value=""/>
    </antcall>
  </target>

  <target name="test-con"
    description="Tests the Java GUI class ${contain} using the noaa.coastwatch.gui.TestContainer class">
    <antcall target="test">
      <param name="class" value="noaa.coastwatch.gui.TestContainer"/>
      <param name="args" value="${contain}"/>
    </antcall>
  </target>

  <target name="test-unit"
    description="Runs the CoastWatch unit tests by running noaa.coastwatch.test.TestRunner">
    <exec executable="scripts/find_testable.sh" outputproperty="unit.tests"/>
    <antcall target="test">
      <param name="class" value="noaa.coastwatch.test.TestRunner"/>
      <param name="args" value="${unit.tests}"/>
    </antcall>
  </target>

  <!-- Define branch targets -->
  <!-- ********************* -->
  
  <!--
  Some other useful git commands:
    git rm                      - removes a file from repository
    git status                  - shows the status of adds/deletes/modifications
    git tag                     - list tags performed
    git tag -a LABEL            - add a tag with label
    git log - -pretty=oneline   - simple log of commits
  -->
  
  <target name="branch-list"
    description="Lists the development branches">
    <exec executable="git">
      <arg line="branch -a"/>
    </exec>
  </target>

  <target name="branch-delete"
    description="Deletes the branch specified by ${branch}">
    <exec executable="git">
      <arg line="branch -d ${branch}"/>
    </exec>
  </target>

  <target name="branch-log"
    description="Shows a history of latest commits to the active branch">
    <exec executable="git">
      <arg line="log -n 10 --pretty='%n----> %cd%n%cn&lt;%ce&gt;%n%s' --name-status"/>
    </exec>
  </target>

</project>
