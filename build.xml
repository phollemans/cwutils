<!--

     FILE: build.xml
  PURPOSE: To define Ant build targets for building the CWF software.
   AUTHOR: Peter Hollemans
     DATE: 2004/03/16
  CHANGES: 2004/08/31, PFH, updated for new install4j version 3.0.2
           2004/09/14, PFH, added install targets
           2004/11/24, PFH, added descriptions for "ant -p"
           2005/03/28, PFH, added pre-release targets
           2006/03/16, PFH, moved install4j path to properties file
           2006/03/31, PFH, added handling of lib/stubs directory
           2006/04/03, PFH, added test target
           2006/05/04, PFH, added proguard tasks
           2006/05/08, PFH, added plugin jar to compile classpath
           2006/11/22, PFH, removed IRIX package from dist target (no 1.5 VM)
           2010/02/14, PFH, added more comments, testtool target
           2012/08/30, PFH, modified to remove Ant 1.8 warnings
           2012/10/04, PFH, updated for new source directory structure
           2012/12/11, PFH, updated for MacOS X 64-bit, removed native code
           2013/02/04, PFH, simplified
           2013/11/06, PFH, added target/source args for javac tasks

  CoastWatch Software Library and Utilities
  Copyright 1998-2013, USDOC/NOAA/NESDIS CoastWatch

-->

<project name="CWF" default="classes">

  <!-- Setup global properties -->
  <!-- *********************** -->

  <buildnumber/>
  <property file="cwf.properties"/>
  <tstamp>
    <format property="current.time" pattern="yyyyMMdd_HHmmss"/>
  </tstamp>

  <!-- Define install task -->
  <!-- ******************* -->

  <!--
  This is the support library for creating installation packages
  for various operating systems.
  -->
  <taskdef 
    name="install4j" 
    classname="com.install4j.Install4JTask"
    classpath="${install4j.dir}/bin/ant.jar"/>

  <!-- Define Java compile classpath -->
  <!-- ***************************** -->
  
  <path id="cp">
    <!-- The main libraries used by the code. -->
    <fileset dir="lib" includes="**/*.jar,**/*.zip"/>
  </path>

  <!-- Add to default excludes -->
  <!-- *********************** -->
  
  <defaultexcludes add="**/.xvpics,**/.xvpics/**"/>

  <!-- Define main compile targets -->
  <!-- *************************** -->
  
  <target name="classes" description="Compiles main Java classes in src/">
    <depend srcdir="src" destdir="classes"/>
    <mkdir dir="classes"/>
    <javac 
      srcdir="src" 
      destdir="classes" 
      classpathref="cp" 
      debug="on" 
      deprecation="on"
      includeantruntime="false"
      target="${java.source.version}"
      source="${java.source.version}">
      <compilerarg line="${javac.args}"/>
    </javac>
    <echo
      file="resources/version.properties" 
      message="cwf.version=${version.full} ${current.time}${line.separator}"/>
    <jar destfile="lib/cwf.jar">
      <fileset dir="classes"/>
      <fileset dir="resources"/>
    </jar>
  </target>

  <target name="lint" description="Compiles main Java classes in src/ with lint checking">
    <depend srcdir="src" destdir="classes"/>
    <mkdir dir="classes"/>
    <javac 
      srcdir="src" 
      destdir="classes" 
      classpathref="cp" 
      debug="on" 
      deprecation="on"
      includeantruntime="false"
      target="${java.source.version}"
      source="${java.source.version}">
      <compilerarg line="${javac.args}"/>
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
    <echo
      file="resources/version.properties" 
      message="cwf.version=${version.full} ${current.time}${line.separator}"/>
    <jar destfile="lib/cwf.jar">
      <fileset dir="classes"/>
      <fileset dir="resources"/>
    </jar>
  </target>

  <!-- Define source and API targets -->
  <!-- ***************************** -->
  
  <target name="source" description="Creates Java and C source code ZIP file">
    <zip destfile="src.zip">
      <zipfileset dir="src" prefix="src"/>
    </zip>
  </target>

  <target name="doc" depends="classes" 
    description="Creates Java API documentation, tool manual pages, and user's guide in doc/">
    <delete dir="doc/api"/>
    <javadoc 
      sourcepath="src" 
      destdir="doc/api" 
      classpathref="cp"
      overview="src/overview.html"
      windowtitle="CoastWatch Utilities v${version}"
      doctitle="CoastWatch Software Library and Utilities v${version} API Specification"
      header="CoastWatch Utils v${version}"
      footer="CoastWatch Utils v${version}">
      <packageset dir="src"/>
    </javadoc>
    <delete dir="doc/tools"/>
    <exec executable="${basedir}/doc/makedoc" dir="doc">
      <arg line="${version}"/>
    </exec>
  </target>

  <target name="api" description="Creates Java API ZIP file in doc/">
    <zip destfile="doc/api.zip">
      <zipfileset dir="doc/api" prefix="api"/>
    </zip>
  </target>

  <target
    name="all"
    description="Combines classes, doc, source, and api targets"
    depends="classes,doc,source,api"/>

  <!-- Define package targets -->
  <!-- ********************** -->

  <target name="pkg_windows" depends="all"
    description="Creates Windows packages">
    <install4j 
      projectfile="cwf.install4j"
      release="${version}"
      buildids="10,278"
      verbose="true">
      <variable name="buildNumber" value="${build.number}"/>
    </install4j>
  </target>

  <target name="pkg_linux" depends="all"
    description="Creates Linux packages">
    <install4j 
      projectfile="cwf.install4j"
      release="${version}"
      buildids="88,288"
      verbose="true">
      <variable name="buildNumber" value="${build.number}"/>
    </install4j>
  </target>

  <target name="pkg_solaris" depends="all"
    description="Creates Solaris packages">
    <install4j 
      projectfile="cwf.install4j"
      release="${version}"
      buildids="93,292"
      verbose="true">
      <variable name="buildNumber" value="${build.number}"/>
    </install4j>
  </target>

  <target name="pkg_macosx" depends="all"
    description="Creates Mac OS X packages">
    <install4j 
      projectfile="cwf.install4j"
      release="${version}"
      buildids="276,528"
      verbose="true">
      <variable name="buildNumber" value="${build.number}"/>
    </install4j>
  </target>

  <target name="pkg_macosx_test" depends="all"
    description="Creates Mac OS X test package">
    <install4j 
      projectfile="cwf.install4j"
      release="${version}"
      buildids="528"
      verbose="true">
      <variable name="buildNumber" value="${build.number}"/>
    </install4j>
  </target>

  <target 
    name="packages"
    depends="pkg_windows,pkg_linux,pkg_solaris,pkg_macosx" 
    description="Creates all package files"/>

  <!-- Define cleanup targets -->
  <!-- ********************** -->

  <target name="clean"
    description="Cleans up compiled Java classes, source ZIP, and documentation">
    <delete file="lib/cwf.jar"/>
    <delete file="src.zip"/>
    <delete dir="classes"/>
    <delete dir="doc/api"/>
    <delete dir="doc/tools"/>
    <delete file="doc/api.zip"/>
  </target>

  <target name="clean_packages"
    description="Deletes all packages">
    <delete>
      <fileset dir="${pkg.dir}" includes="**/*"/>
    </delete>
  </target>

  <!-- Define test targets -->
  <!-- ******************* -->
  
  <target name="test_jar" depends="classes"
    description="Copies the CWF jar file into the install directory for direct in-situ testing">
    <copy file="lib/cwf.jar" todir="${install.dir}/lib"/>
  </target>
  
  <path id="testcp">
    <fileset dir="lib" includes="**/*.jar,**/*.zip"/>
    <pathelement location="data"/>
    <pathelement location="extensions"/>
    <pathelement location="${java.home}/lib/plugin.jar"/>
  </path>

  <target name="test" depends="classes"
    description="Tests the Java class ${class} by calling its main() method with arguments ${args}">
    <java 
      classname="${class}" 
      classpathref="testcp"
      fork="true">
      <env key="${ld.var}" value="${basedir}/lib/${os.libs}"/>
      <jvmarg line="${vm.args}"/>
      <arg value="${args}"/>
    </java>
  </target>

  <target name="test_cdat" 
    description="Tests CDAT by calling its main() method with no arguments">
    <antcall target="test">
      <param name="class" value="noaa.coastwatch.tools.cdat"/>
      <param name="args" value=""/>
    </antcall>
  </target>

  <target name="test_info" 
    description="Tests the cwinfo tool by calling its main() method with arguments ${args}">
    <antcall target="test">
      <param name="class" value="noaa.coastwatch.tools.cwinfo"/>
    </antcall>
  </target>

  <target name="test_tool" 
    description="Tests a CoastWatch tool named ${tool} by calling its main() method with arguments ${args}">
    <antcall target="test">
      <param name="class" value="noaa.coastwatch.tools.${tool}"/>
    </antcall>
  </target>

  <target name="test_suite"
    description="Runs the CoastWatch test suite by calling cwtoolstest">
    <antcall target="test">
      <param name="class" value="noaa.coastwatch.tools.cwtoolstest"/>
      <param name="args" value=""/>
    </antcall>
  </target>

  <target name="test_con"
    description="Tests the Java GUI class ${contain} using the noaa.coastwatch.gui.TestContainer class">
    <antcall target="test">
      <param name="class" value="noaa.coastwatch.gui.TestContainer"/>
      <param name="args" value="${contain}"/>
    </antcall>
  </target>

</project>
